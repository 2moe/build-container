# This is a basic workflow to help you get started with Actions
name: check_version

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
    paths:
      - ".github/workflows/check_version.yml"
  #schedule:
  #  - cron: "35 17 * * *"
  #cron不生效？？？

  # Allows you to run this workflow manually from the Actions tab
  #workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    #container: multiarch/qemu-user-static:x86_64-aarch64
    #env:
    #REPO: ${{ secrets.DEBUG_REPO }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout
        uses: actions/checkout@v2

      - name: set environment
        run: |
          printf "%s\n" "DEBIAN_FRONTEND=noninteractive" >> ${GITHUB_ENV}
          printf "%s\n" "TMOE_LINUX_URL=github.com/2moe/tmoe-linux" >> ${GITHUB_ENV}
          printf "%s\n" "DISTRO_PATH=amd64/ubuntu-dev/xfce" >> ${GITHUB_ENV}
          printf "%s\n" "START_TIME=$(date +%H:%M)" >> ${GITHUB_ENV}
          printf "%s\n" "DISTRO_NAME=ubuntu-dev_amd64" >> ${GITHUB_ENV}
          printf "%s\n"  "ROOTFS_FILE_NAME=ubuntu-dev_amd64+xfce-$(date +%Y_%m-%d)-rootfs" >> ${GITHUB_ENV}
          printf "%s\n" "ROOTFS_FILE_LITE_NAME=ubuntu-dev_amd64-rootfs" >> ${GITHUB_ENV}
          printf "%s\n" "${START_TIME} ${ROOTFS_FILE_NAME} ${ROOTFS_FILE_LITE_NAME}"

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Available platforms
        run: echo ${{ steps.qemu.outputs.platforms }}

      - name: check version of docker-image
        run: |
          ROOTFS_VERSION=latest02
          VERSION_01_DATE=$(curl -L ${{ secrets.AZURE_URL }}/latest01/${DISTRO_PATH}/build.txt | awk -F 'BUILD_DATE=' '{print $2}')
          VERSION_02_DATE=$(curl -L ${{ secrets.AZURE_URL }}/latest02/${DISTRO_PATH}/build.txt | awk -F 'BUILD_DATE=' '{print $2}')
          printf "%s\n" "${VERSION_01_DATE} ${VERSION_02_DATE}"
          if [ -z ${VERSION_01_DATE} ];then VERSION_01_DATE=20210116 ; fi
          if [ -z ${VERSION_02_DATE} ];then VERSION_01_DATE=20210118 ; fi
          if ((${VERSION_01_DATE} < ${VERSION_02_DATE})); then ROOTFS_VERSION=latest01 ; fi
          printf "%s\n" "${VERSION_01_DATE} ${VERSION_02_DATE} ${ROOTFS_VERSION}"
          printf "%s\n" "ROOTFS_VERSION=${ROOTFS_VERSION}" >> ${GITHUB_ENV}
