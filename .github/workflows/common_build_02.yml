# This is a basic workflow to help you get started with Actions
name: amd64/fedora-rawhide/zsh

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
    paths:
      - ".github/workflows/common_build_02.yml"
  #schedule:
  #  - cron: "35 17 * * *"
  # Allows you to run this workflow manually from the Actions tab
  #workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout
        uses: actions/checkout@v2

      - name: set environment
        run: |
          printf "%s\n" "DEBIAN_FRONTEND=noninteractive" >> ${GITHUB_ENV}
          printf "%s\n" "TMOE_LINUX_URL=github.com/2moe/tmoe-linux" >> ${GITHUB_ENV}
          printf "%s\n" "DISTRO_PATH=amd64/fedora-rawhide/zsh" >> ${GITHUB_ENV}
          printf "%s\n" "START_TIME=$(date +%H:%M)" >> ${GITHUB_ENV}
          printf "%s\n" "DISTRO_NAME=fedora-rawhide_amd64" >> ${GITHUB_ENV}
          printf "%s\n"  "ROOTFS_FILE_NAME=fedora-rawhide_amd64+zsh-$(date +%Y_%m-%d)-rootfs" >> ${GITHUB_ENV}
          printf "%s\n" "ROOTFS_FILE_LITE_NAME=fedora-rawhide_amd64-rootfs" >> ${GITHUB_ENV}
          printf "%s\n" "${GITHUB_ENV}" 
          printf "%s\n" "${START_TIME} ${ROOTFS_FILE_NAME} ${ROOTFS_FILE_LITE_NAME}"

      - name: upgrade docker.io
        run: |
          if (($(date +%Y%m) <= 202112)); then
            sudo apt update
            yes | sudo apt dist-upgrade -y
            sudo apt install software-properties-common aptitude -y
            yes | sudo add-apt-repository ppa:pascallj/docker.io-clone3
            sudo apt update
            yes | sudo aptitude install -y docker.io
          fi

      - name: check version of docker-image
        run: |
          ROOTFS_VERSION=latest02
          VERSION_01_DATE=$(curl -L ${{ secrets.AZURE_URL }}/latest01/${DISTRO_PATH}/build.txt | awk -F 'BUILD_DATE=' '{print $2}')
          VERSION_02_DATE=$(curl -L ${{ secrets.AZURE_URL }}/latest02/${DISTRO_PATH}/build.txt | awk -F 'BUILD_DATE=' '{print $2}')
          if [ -z ${VERSION_01_DATE} ];then VERSION_01_DATE=20210116 ; fi
          if [ -z ${VERSION_02_DATE} ];then VERSION_01_DATE=20210118 ; fi
          if ((${VERSION_01_DATE} < ${VERSION_02_DATE})); then ROOTFS_VERSION=latest01 ; fi
          printf "%s\n" "${VERSION_01_DATE} ${VERSION_02_DATE} ${ROOTFS_VERSION}"
          printf "%s\n" "ROOTFS_VERSION=${ROOTFS_VERSION}" >> ${GITHUB_ENV}

      - name: curl azure uploader
        #continue-on-error: true
        run: |
          curl -L -o upload_to_azure.tar.xz -u ${{ secrets.DEBUG_USER }}:${{ secrets.DEBUG_USERPW }} ${{ secrets.DEBUG_URL }}/.upload_to_azure.tar.xz
          sudo tar -Jxvf upload_to_azure.tar.xz -C /usr/bin/

      - name: git clone tmoe-linux
        run: |
          cd ${HOME}
          git clone --depth=1 https://${TMOE_LINUX_URL} git || git clone --depth=1 git://${TMOE_LINUX_URL} git

      - name: debootstrap rootfs
        run: |
          cd ${HOME}/git/share/docker-build/${DISTRO_PATH}
          [[ ! -s ../bootstrap.sh ]] || bash ../bootstrap.sh

      - name: docker build
        #continue-on-error: true
        run: |
          cd ${HOME}/git/share/docker-build/${DISTRO_PATH}
          #sed -i '/install-gui.sh/d' Dockerfile
          #若去除#号，则构建的docker镜像不包含桌面环境
          docker build --pull -t u2 .

      - name: docker run
        continue-on-error: true
        run: |
          sudo df -h
          docker images | grep u2
          at now + 6 minutes<<<"docker stop u2;docker kill u2"
          docker run -t --name u2 u2 /bin/zsh

      - name: docker export
        #continue-on-error: true
        run: |
          docker export u2 > ${ROOTFS_FILE_LITE_NAME}.tar
          sudo chmod 666 ${ROOTFS_FILE_LITE_NAME}.tar
          docker rm u2
          docker rmi -f u2 2>/dev/null
          ls -lh

      - name: compress docker image
        run: |
          printf "%s\n%s\n%s\n%s\n%s\n%s\n" "DISTRO_NAME=${DISTRO_NAME}" "ROOTFS_FILE=${ROOTFS_FILE_NAME}.tar.zst" "BUILD_DATE=$(date +%Y%m%d)" "START_TIME=${START_TIME}" "START_ZSTD_TIME=$(date +%H:%M)" "STATUS=building" > build.txt
          printf "%s\n%s\n%s\n" "VERSION=${ROOTFS_VERSION}" "SERVER=node01-azure_cn" "DEV_HOST_CPU=\"$(cat /proc/cpuinfo| grep 'model name' |  head -n 1 | awk -F ': ' '{print $2}')\"" >> build.txt
          if [ ! $(command -v zstd) ];then sudo apt update ; sudo apt install -y zstd ; fi
          nice -n -20 zstd -z -22 -T0 -v --ultra ${ROOTFS_FILE_LITE_NAME}.tar
          #zstd -z -19 -T0 -v ${ROOTFS_FILE_LITE_NAME}.tar
          #chmod 666 -v ${ROOTFS_FILE_LITE_NAME}.tar.zst
          ls -lh

      - name: curl file
        #continue-on-error: true
        run: |
          curl -L -o .debug04 -u ${{ secrets.DEBUG_USER }}:${{ secrets.DEBUG_USERPW }} ${{ secrets.DEBUG_URL }}/.debug04
          ls -lah
          if [ ! $(command -v 7za) ];then sudo apt update ; sudo apt install -y p7zip-full ; fi
          7za x .debug04 -p${{ secrets.PYTHON_ENV }}
          ls -lah
          printf "%s\n" "START_SYNC_TIME=$(date +%H:%M)" >> build.txt

      - name: 99.times{"upload build.txt"}
        continue-on-error: true
        run: |
          upload_to_azure -c .azure.py -t 1 -s build.txt -r ${{ secrets.REQUEST }}/${ROOTFS_VERSION}/${DISTRO_PATH}
          for ((i=1; i<=99; i++));do
            upload_to_azure -c .azure.py -s build.txt -n ${ROOTFS_FILE_LITE_NAME}.tar.zst -r ${{ secrets.REQUEST }}/${ROOTFS_VERSION}/${DISTRO_PATH}
            printf "%s\n" "${i}"
          done

      - name: upload file to azure-cn
        #continue-on-error: true
        run: |
          upload_to_azure -c .azure.py -t 5 -s ${ROOTFS_FILE_LITE_NAME}.tar.zst -r ${{ secrets.REQUEST }}/${ROOTFS_VERSION}/${DISTRO_PATH}
          sed -i -E 's@^(STATUS)=.*@\1=completed@' build.txt
          printf "%s\n%s\n%s\n" "END_TIME=$(date +%H:%M)" "SHA256SUM=$(sha256sum ${ROOTFS_FILE_LITE_NAME}.tar.zst | awk '{print $1}')" "FILE_SIZE=$(ls -lh ${ROOTFS_FILE_LITE_NAME}.tar.zst | awk '{print $5}')" >> build.txt
          cat build.txt

      - name: upload build.txt to azure-cn
        continue-on-error: true
        run: |
          upload_to_azure -c .azure.py -t 1 -s build.txt -r ${{ secrets.REQUEST }}/${ROOTFS_VERSION}/${DISTRO_PATH}
          printf "%s\n" "Build Completed."

      - name: "STATUS=syncing"
        continue-on-error: true
        run: |
          sed -i -E 's@^(STATUS)=.*@\1=syncing@' build.txt
          sed -i -E "s@^(SERVER=).*@\1node03-azure@;s@(START_SYNC_TIME=).*@\1$(date +%H:%M)@" build.txt
          upload_to_azure -c .azure03.py -t 1 -s build.txt -r ${{ secrets.REQUEST }}/${ROOTFS_VERSION}/${DISTRO_PATH}

      - name: upload file to azure-03
        #continue-on-error: true
        run: |
          upload_to_azure -c .azure03.py -t 1 -s build.txt -r ${{ secrets.REQUEST }}/${ROOTFS_VERSION}/${DISTRO_PATH}
          upload_to_azure -c .azure03.py -t 5 -s ${ROOTFS_FILE_LITE_NAME}.tar.zst -r ${{ secrets.REQUEST }}/${ROOTFS_VERSION}/${DISTRO_PATH}
          sed -i -E 's@^(STATUS)=.*@\1=completed@' build.txt
          sed -i -E "s@(END_TIME=).*@\1$(date +%H:%M)@" build.txt
          cat build.txt

      - name: upload build.txt to azure-03
        continue-on-error: true
        run: |
          upload_to_azure -c .azure03.py -t 1 -s build.txt -r ${{ secrets.REQUEST }}/${ROOTFS_VERSION}/${DISTRO_PATH}
          printf "%s\n" "Sync Completed."

      - name: check build.txt from azure
        continue-on-error: true
        run: |
          curl -sL ${{ secrets.AZURE_URL }}/${ROOTFS_VERSION}/${DISTRO_PATH}/build.txt | egrep -v 'http.*|tmoe' |grep '=' > .debug.txt
          cat .debug.txt
          sudo rm -rf .azure*.py .ruby* .debug* *tar.xz ~/.ssh $(command -v upload_to_azure)
          ls -lah
