name: build arch docker image
on:
  push:
    branches: [master]
    paths:
      - ".github/workflows/arch.yml"
  # watch:
  #   types: started

jobs:
  first_job:
    runs-on: ${{ matrix.os }}
    env:
      name: arch
      user: cake233
      platform: ${{ matrix.platform }}
      arch: ${{ matrix.arch }}
      zstd_level: 13

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            tag: base
            arch: amd64
            platform: "linux/amd64"

          - os: ubuntu-latest
            tag: base
            arch: arm64
            platform: "linux/arm64"

          - os: ubuntu-latest
            tag: base
            arch: armv7
            platform: "linux/arm/v7"

          # - os: self-hosted-debian
          #   tag: hello
          #   arch: amd64
          #   platform: "linux/amd64"

    # repeat...
    steps:
      - name: set time env
        run: |
          printf "%s\n" \
            "time_begin=$(date -u --rfc-3339=ns)" \
            "time_today=$(date -u --rfc-3339=date)" \
            >> "$GITHUB_ENV"

      - uses: actions/checkout@v2
        with:
          # repository: "2moe/xxx"
          ref: "master"
          fetch-depth: 1

      - name: get container os & set global env
        env:
          tag: ${{ matrix.tag }}
        run: bash docker/action/get_container_os

      - name: set up qemu-user & binfmt
        id: qemu
        uses: docker/setup-qemu-action@v1
        if: matrix.arch != 'amd64' && matrix.arch != 'i386'
        with:
          image: tonistiigi/binfmt:latest
          platforms: ${{ matrix.platform }}

      - name: set container name(notag)
        if: matrix.tag == 'base' || matrix.tag == 'latest'
        env:
          container: ${{ env.name }}-${{ matrix.arch }}
        run: echo "Container_name=$container" >> "$GITHUB_ENV"

      - name: set container name
        if: matrix.tag != 'base' && matrix.tag != 'latest'
        env:
          container: ${{ env.name }}-${{ matrix.tag }}-${{ matrix.arch }}
        run: echo "Container_name=$container" >> "$GITHUB_ENV"

      - name: set repo (global env)
        env:
          repo: ${{ env.user }}/${{ env.Container_name }}
        run: echo "repo=$repo" >> "$GITHUB_ENV"

      - name: build container
        if: |
          matrix.tag != 'xfce' && 
          matrix.tag != 'mate' &&
          matrix.tag != 'kde' &&
          matrix.tag != 'lxqt' &&
          matrix.tag != 'lxde'
        env:
          file: "../${{ env.name }}/${{ matrix.tag }}.dockerfile"
          tag: ${{ matrix.tag }}
        run: bash docker/action/docker_build

      - name: build base
        if: matrix.tag == 'base'
        env:
          file: "../${{ env.name }}/${{ matrix.tag }}02.dockerfile"
        run: |
          docker run -d --name base_tmp ${{ env.repo }}:latest sh
          docker cp base_tmp:/arch.tar.xz .
          xz -dv arch.tar.xz
          mv arch.tar docker/assets
          docker stop base_tmp
          docker rm -f base_tmp
          docker rmi -f ${repo}
          bash docker/action/docker_build
          rm -fv docker/assets/arch.tar

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ env.user }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: docker push
        run: |
          docker push -a "${repo}"

      - name: docker run (zsh)
        if: matrix.tag == 'zsh'
        timeout-minutes: 1
        continue-on-error: true
        run: bash docker/action/docker_run docker zsh

      - name: docker run
        if: matrix.tag != 'zsh'
        timeout-minutes: 1
        run: bash docker/action/docker_run

      - name: docker export
        run: bash docker/action/docker_export

      - name: start zstd
        # if: matrix.tag != 'base'
        run: bash docker/action/compress_file $zstd_level

      - name: docker build zstd image
        # if: matrix.tag != 'base'
        run: bash docker/action/build_zstd_image

      - name: set end time
        run: |
          printf "%s\n" \
            "end_time_normal=$(date -u +%Y-%m-%d_%H-%M)" \
            "end_time=$(date -u --rfc-3339=ns)" \
            >>"$GITHUB_ENV"

      - name: write to toml file
        env:
          tag: ${{ matrix.tag }}
        run: |
          bash docker/action/write_to_toml

      - name: cat i.toml
        run: cat i.toml

      - name: gen docker readme
        run: |
          bash docker/action/gen_docker_readme
          cat docker-readme.md

      - name: push README to Dockerhub
        uses: christian-korneck/update-container-description-action@v1
        env:
          DOCKER_USER: ${{ env.user }}
          DOCKER_PASS: ${{ secrets.DOCKER_TOKEN }}
        with:
          destination_container_repo: ${{ env.repo }}
          provider: dockerhub
          short_description: "Quickly install ${{ env.Container_name }}"
          readme_file: "docker-readme.md"

      - name: copy docker readme.md to home dir
        run: |
          cp docker-readme.md ~/${Container_name}.md
          cp i.toml ~/${Container_name}.toml

      - name: index repo
        uses: actions/checkout@v2
        with:
          repository: "2cd/index"
          ref: "master"
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
          fetch-depth: 1 # otherwise, there would be errors pushing refs to the destination repository.
      - name: create local changes
        run: |
          mkdir -p doc
          cp ~/${Container_name}.md ~/${Container_name}.toml doc/

      - name: commit files
        run: |
          git add .
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "docs(docker): ${Container_name}.md" -a
      - name: push changes
        uses: ad-m/github-push-action@master
        with:
          repository: "2cd/index"
          github_token: ${{ secrets.GH_TOKEN }}
          branch: "master"
#container_release// repo=repo
# arch base
# sh// arch.tar again
