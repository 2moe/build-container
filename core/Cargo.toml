#! Please note that this library does not support wasm32. I was going to support it when I was developing, but had some unpleasant encounters along the way, so I gave up.
[package]
name = "get_lxc_core"
version = "0.0.0-alpha.1"
edition = "2021"
license = "Apache-2.0"
authors = ["Moe <m@tmoe.me>"]
# resolver = "2"

[lib]
path = "src/lib.rs"

[features]
default = ["request"]
request = ["dep:reqwest", "dep:indicatif", "dep:anyhow"]

[dependencies]
thiserror = "1.0.40"
serde = { version = "1.0.159", features = ["derive"] }
ahash = { version = "0.8.3", features = ["serde"] }
getset = "0.1.2"
tinystr = { version = "0.7.1", features = ["serde"] }
anyhow = { version = "1.0.70", optional = true }
indicatif = { version = "0.17.3", optional = true }
comfy-table = "6.1.4"
tokio = { version = "1.27.0", default-features = false, features = ["fs"] }
form_urlencoded = "1.1.0"
log = "0.4.17"
crossterm = { version = "0.26.1", default-features = false }
# envpath = "0.0.1-alpha.6"

# The complex "conditional compilation" is used here to specify the platforms on which the `rustls-tls` feature is enabled.
# This is necessary because `rustls` depends on `ring`, which does not support all platforms.
# [(windows| darwin) * (x86_64 | aarch64)] || [windows * x86] || [(some unix-like) * (x86_64 | aarch64 | armv(5-7) | i(5-6)86)]
# https://github.com/briansmith/ring/blob/main/build.rs
[target.'cfg(any(all(any(windows, target_os = "macos", target_os = "ios"), any(target_arch = "x86_64", target_arch = "aarch64")), all(windows, target_arch = "x86"), all(any(target_os = "linux", target_os = "android", target_os = "dragonfly", target_os = "freebsd", target_os = "fuchsia", target_os = "illumos", target_os = "netbsd", target_os = "openbsd", target_os = "redox", target_os = "solaris"), any(target_arch = "x86_64", target_arch = "aarch64", target_arch = "arm", target_arch = "x86"))))'.dependencies]
reqwest = { version = "0.11.16", default-features = false, optional = true, features = [
    # "rustls-tls",
    "rustls-tls-native-roots",
    "gzip",
] }


# About the `native-tls-vendored`: This feature enables the use of the native-tls but with vendored dependencies, meaning that all of the necessary native libraries are bundled into the reqwest crate itself. This avoids the need to install the native TLS libraries separately on the target system.
# In 2023-02, if we use `native-tls`, instead of `native-tls-vendored`, then we have to install `libssl-dev` manually on debian (mipsel, riscv64, s390x) before compiling.
[target.'cfg(not(any(all(any(windows, target_os = "macos", target_os = "ios"), any(target_arch = "x86_64", target_arch = "aarch64")), all(windows, target_arch = "x86"), all(any(target_os = "linux", target_os = "android", target_os = "dragonfly", target_os = "freebsd", target_os = "fuchsia", target_os = "illumos", target_os = "netbsd", target_os = "openbsd", target_os = "redox", target_os = "solaris"), any(target_arch = "x86_64", target_arch = "aarch64", target_arch = "arm", target_arch = "x86")))))'.dependencies]
reqwest = { version = "0.11.16", default-features = false, optional = true, features = [
    # "native-tls",
    "native-tls-vendored",
    "gzip",
] }

[dev-dependencies]
ron = "0.8.0"
tokio = { version = "1.27.0", default-features = false, features = [
    "macros",
    "fs",
] }

[package.metadata.docs.rs]
default-targets = "x86_64-unknown-linux-gnu"
