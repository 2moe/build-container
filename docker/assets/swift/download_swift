case ${ARCH} in
amd64)
    OS_ARCH_SUFFIX=""
    ADDITIONAL_TAR_OPTIONS="--strip-components=1"
    ;;
arm64)
    OS_ARCH_SUFFIX=-aarch64
    ADDITIONAL_TAR_OPTIONS=""
    ;;
esac
# https://github.com/apple/swift-docker/blob/main/nightly-main/ubuntu/20.04/buildx/Dockerfile
OS_VER=$SWIFT_PLATFORM$OS_MAJOR_VER.$OS_MIN_VER$OS_ARCH_SUFFIX
PLATFORM_WEBROOT="$SWIFT_WEBROOT/$SWIFT_PLATFORM$OS_MAJOR_VER$OS_MIN_VER$OS_ARCH_SUFFIX"
echo "${PLATFORM_WEBROOT}/latest-build.yml"
BUILD_YAML=$(curl -sL ${PLATFORM_WEBROOT}/latest-build.yml)

export $(printf "%s\n" "$BUILD_YAML" | grep 'download:' | sed 's/:[^:\/\/]/=/g')
export $(printf "%s\n" "$BUILD_YAML" | grep 'download_signature:' | sed 's/:[^:\/\/]/=/g')
export DOWNLOAD_DIR=$(echo $download | sed "s/-${OS_VER}.tar.gz//g")
echo $DOWNLOAD_DIR >.swift_tag

# - Download the Swift toolchain
export GNUPGHOME="$(mktemp -d)"
curl -fsSL ${PLATFORM_WEBROOT}/${DOWNLOAD_DIR}/${download} -o latest_toolchain.tar.gz

# - Unpack the toolchain, set libs permissions, and clean up.
tar -xzf latest_toolchain.tar.gz --directory / ${ADDITIONAL_TAR_OPTIONS}
chmod -R o+r /usr/lib/swift
rm -rf "$GNUPGHOME" latest_toolchain.tar.gz.sig latest_toolchain.tar.gz 2>/dev/null
