set -ex
#---------------------
case "$name" in
test)
    container_os=alpine
    case "$tag" in
    hello)
        container_release=edge
        extra_tag=', "test"'
        ;;
    *) container_release=latest ;;
    esac
    ;;
alpine)
    container_release=edge
    DISTRO_OS="alpine-edge"
    ;;
arch)
    container_release=latest
    DISTRO_OS="arch"
    ;;
debian)
    container_release=sid
    DISTRO_OS="debian-sid"
    ;;
fedora)
    container_release=rawhide
    DISTRO_OS="fedora-rawhide"
    ;;
kali)
    container_release=rolling
    DISTRO_OS="kali-rolling"
    ;;
manjaro)
    container_release=stable
    DISTRO_OS="manjaro-stable"
    ;;
mongo)
    container_os=ubuntu
    container_release=lts
    ;;
rust)
    case "$tag" in
    latest)
        container_os=debian
        container_release=sid
        extra_tag=', "nightly", "unstable", "default", "gnu-libc"'
        ;;
    alpine | *)
        container_os=alpine
        container_release=edge
        extra_tag=', "nightly", "unstable", "minimal", "musl-libc", "musl"'
        ;;
    esac
    ;;
code)
    container_os=debian
    container_release=sid
    extra_tag=', "vsc", "vscode", "web"'
    ;;
dotnet)
    container_os=arch
    container_release=latest
    extra_tag=', ".NET", "dotnet-sdk"'
    ;;
swift)
    container_os=ubuntu
    container_release=focal
    extra_tag=', "nightly"'
    ;;
ubuntu)
    case "$tag" in
    bionic)
        container_release=bionic
        extra_tag=', "18.04"'
        DISTRO_OS="ubuntu-bionic"
        ;;
    dde)
        container_release=dde
        extra_tag=', "stable"'
        DISTRO_OS="ubuntu"
        ;;
    *)
        container_release=dev
        extra_tag=', "devel"'
        DISTRO_OS="ubuntu-dev"
        ;;
    esac
    ;;
esac

if [[ -z ${container_os} ]]; then
    container_os="$name"
fi

# node-alpine

if [[ -z ${container_release} ]]; then
    # container_os=$tag
    case "$tag" in
    latest)
        container_os=debian
        container_release=stable
        ;;
    alpine)
        container_os=alpine
        container_release=stable
        extra_tag=', "musl-libc", "musl"'
        ;;
    *) container_release=$tag ;;
    esac
fi

if [[ -z ${DISTRO_OS} ]]; then
    DISTRO_OS="${name}"
fi

DISTRO_NAME="${DISTRO_OS}_${DEB_ARCH}"

# if [[ -z ${DISTRO_NAME} ]]; then
#     case "$tag" in
#     latest)
#         DISTRO_NAME="${container_os}_${DEB_ARCH}"
#         ;;
#     alpine)
#         DISTRO_NAME="${container_os}-${container_release}_${DEB_ARCH}"
#         ;;
#     *)
#         case ${container_release} in
#         latest) DISTRO_NAME="${container_os}_${DEB_ARCH}" ;;
#         *) DISTRO_NAME="${container_os}-${container_release}_${DEB_ARCH}" ;;
#         esac
#         ;;
#     esac
# fi
case "$name" in
alpine) LOCALE="C.UTF-8" ;;
*)
    case "$tag" in
    alpine | musl) LOCALE="C.UTF-8" ;;
    *) LOCALE="en_US.UTF-8" ;;
    esac
    ;;
esac

case "$tag" in
xfce* | kde* | lxde | lxqt | mate | cutefish | dde | ukui)
    X11=true
    LOGIN_SHELL=zsh
    ;;
zsh)
    X11=false
    LOGIN_SHELL=zsh
    ;;
base)
    X11=false
    LOGIN_SHELL=sh
    ;;
alpine | latest)
    X11=false
    LOGIN_SHELL=bash
    ;;
*)
    X11=false
    LOGIN_SHELL=sh
    ;;
esac

check_version_of_docker_image() {
    # Remote_dir="/share/next/down/share/Tmoe-linux/rootfs"
    Netdisk='http://cdn02.tmoe.me/node03'
    Distro_path="${DEB_ARCH}/${DISTRO_OS}/${tag}"

    VERSION_01=$(curl -L "${Netdisk}/latest01/${Distro_path}/build.txt")
    VERSION_02=$(curl -L "${Netdisk}/latest02/${Distro_path}/build.txt")
    Version_01_date=$(printf "%s\n" "$VERSION_01" | grep BUILD_DATE | awk -F '=' '{print $2}')
    Version_02_date=$(printf "%s\n" "$VERSION_02" | grep BUILD_DATE | awk -F '=' '{print $2}')
    # ROOTFS_FILE
    VERSION_01_FILE=$(printf "%s\n" "$VERSION_01" | grep ROOTFS_FILE | awk -F '=' '{print $2}')
    VERSION_02_FILE=$(printf "%s\n" "$VERSION_02" | grep ROOTFS_FILE | awk -F '=' '{print $2}')

    VERSION_01_TAG=$(printf "%s\n" "$VERSION_01" | grep BUILD_TAG | awk -F '=' '{print $2}')
    VERSION_02_TAG=$(printf "%s\n" "$VERSION_02" | grep BUILD_TAG | awk -F '=' '{print $2}')

    VERSION_01_SHA256=$(printf "%s\n" "$VERSION_01" | grep SHA256SUM | awk -F '=' '{print $2}')
    VERSION_02_SHA256=$(printf "%s\n" "$VERSION_02" | grep SHA256SUM | awk -F '=' '{print $2}')

    if [ -z "${Version_01_date}" ]; then
        Version_01_date=20211126
    fi

    if [ -z "${Version_02_date}" ]; then
        Version_02_date=20211128
    fi

    if ((Version_01_date < Version_02_date)); then
        Rootfs_version=latest01
        LAST_VERSION=latest02
        LAST_DATE="$Version_02_date"
        LAST_FILE="$VERSION_02_FILE"
        LAST_TAG="$VERSION_02_TAG"
        LAST_SHA256="$VERSION_02_SHA256"
        # old_file = current.old.file
        OLD_FILE="$VERSION_01_FILE"
        OLD_SHA256="$VERSION_01_SHA256"
    else
        Rootfs_version=latest02
        LAST_VERSION=latest01
        LAST_DATE="$Version_01_date"
        LAST_FILE="$VERSION_01_FILE"
        LAST_TAG="$VERSION_01_TAG"
        LAST_SHA256="$VERSION_01_SHA256"
        OLD_FILE="$VERSION_02_FILE"
        OLD_SHA256="$VERSION_02_SHA256"
    fi

    printf "%s\n" \
        "v1 = ${Version_01_date}" \
        "v2 = ${Version_02_date}" \
        "ver = ${Rootfs_version}"
    case "$name-$tag" in
    arch-base)
        NODE_1=false
        NODE_2=false
        NODE_3=false
        ;;
    *-base)
        NODE_1=true
        NODE_2=true
        NODE_3=true
        ;;
    *)
        NODE_1=true
        NODE_2=true
        NODE_3=true
        ;;
    esac
}
check_version_of_docker_image

printf "%s\n" \
    "container_os=$container_os" \
    "container_release=$container_release" \
    "DISTRO_NAME=${DISTRO_NAME}" \
    "X11=$X11" \
    "LOGIN_SHELL=${LOGIN_SHELL}" \
    "Rootfs_version=${Rootfs_version}" \
    "LAST_VERSION=${LAST_VERSION}" \
    "LAST_DATE=${LAST_DATE}" \
    "LAST_FILE=${LAST_FILE}" \
    "OLD_FILE=${OLD_FILE}" \
    "LAST_TAG=${LAST_TAG}" \
    "OLD_SHA256=${OLD_SHA256}" \
    "LAST_SHA256=${LAST_SHA256}" \
    "LOCALE=${LOCALE}" \
    "NODE_1=${NODE_1}" \
    "NODE_2=${NODE_2}" \
    "NODE_3=${NODE_3}" \
    >>"$GITHUB_ENV"

if [[ -n $extra_tag ]]; then
    printf "%s\n" \
        "extra_tag=$extra_tag" \
        >>"$GITHUB_ENV"
fi
