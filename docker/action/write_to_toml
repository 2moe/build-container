#!/usr/bin/env bash
set -ex
#-----------------
write_to_toml_main() {
    write_main_toml
    check_toml_time
    write_extra_toml_data
}

write_main_toml() {
    case "$tag" in
    latest | base) Container_name="${name}_${DEB_ARCH}" ;;
    alpine) Container_name="${name}-musl_${DEB_ARCH}" ;;
    *) Container_name="${name}-${tag}_${DEB_ARCH}" ;;
    esac

    cat >i.toml <<-EOF
[main]
name = "$name"
tag = ["$tag", "$time_today"${extra_tag}]
os = "$container_os"
release = "$container_release"
arch = "$DEB_ARCH"
platform = "$platform"
x11_or_wayland = $X11
syntax_version = "0.0.0-alpha.3"

[file]
name = "${Container_name}_${end_time_normal}.tar.zst"

# This value can be used to verify the integrity of the file
sha256 = "${file_sha256}"

# zstd: [1-22]
zstd-level = ${zstd_level}

[file.size]
# Installed size ≈ tar-size
# Installed size is approximately equal to the size of the tar file
tar = "${file_size_tar}"
tar_bytes = ${file_size_tar_bytes}

# Space occupied ≈ tar-size + zstd-size
# You will need to prepare a large enough space before installation.
zstd = "${file_size_zst}"
zstd_bytes = ${file_size_zstd_bytes}

[compatibility]
compatible_mode = true

previous_version = "${LAST_VERSION}"

# The value is &str, not int
previous_date = "${LAST_DATE}"
previous_tag = "${LAST_TAG}"
previous_file = "${LAST_FILE}"
previous_sha256 = "${LAST_SHA256}"

current_version = "${Rootfs_version}"
current_date = "$(date -u +%Y%m%d)"
old_file = "${OLD_FILE}"
old_sha256 = "${OLD_SHA256}"
# edition 2021
# DISTRO_NAME=${DISTRO_NAME}
# ROOTFS_FILE=${Container_name}_${end_time_normal}-rootfs.tar.zst
# SHA256SUM=${file_sha256}
# BUILD_DATE=$(date -u +%Y%m%d)
# BUILD_TAG=${time_today}
# STATUS=completed
# VERSION=${Rootfs_version}
# END_TIME=$(date -u +%H:%M)

[time]
format = "rfc-3339"
zone = "UTC"
date = ${time_today}
begin = ${time_begin}
start-sync_0 = ${time_start_sync_0}
EOF
}
check_toml_time() {
    if [ -n "${time_start_zstd}" ]; then
        echo "start-zstd = ${time_start_zstd}" >>i.toml
    fi

    if [ -n "${time_start_sync_1}" ]; then
        echo "start-sync_1 = ${time_start_sync_1}" >>i.toml
    fi

    if [ -n "${time_end_sync_1}" ]; then
        echo "end-sync_1 = ${time_end_sync_1}" >>i.toml
    fi
}

write_extra_toml_data() {
    # printf "%s\n" \
    #     "end = ${end_time}" \
    #     "" \
    #     '[server]' \
    #     'name = "docker"' \
    #     "node = 4" \
    #     "repo = \"${repo}\"" \
    #     "" \
    #     '[server.availability]' \
    #     "node_1 = false" \o
    #     "node_2 = false" \
    #     "node_3 = false" \
    #     "" \
    #     '# Environment variables  (●＞ω＜●)' \
    #     '[env]' \
    #     "LANG = \"${LOCALE}\"" \
    #     >>i.toml

    cat >server_tmp.toml <<-EOF
end = ${end_time}

[server]
repo = "${repo}"

[server.node1]
name = "cn"
current = false
previous = false
in_sync = false
split = false

[server.node2]
name = "tmoe"
current = false
previous = ${NODE_2}
in_sync = false
split = false

[server.node3]
name = "azure"
current = false
previous = ${NODE_3}
in_sync = false
split = false

[server.node4]
name = "docker"
current = true

# Environment variables  (●＞ω＜●)
[env]
LANG = "${LOCALE}"
EOF
    cat server_tmp.toml >>i.toml
    # for i in /tmp/version/container.env /tmp/version/version.toml; do
    #     if [ -r "${i}" ]; then
    #         sed -i 's@^export @@g' "${i}"
    #         sed -i "$ r${i}" i.toml
    #     fi
    # done
    i="/tmp/version/container.env"
    if [ -r "$i" ]; then
        cat "$i"
        sed -E \
            -e "s@export@@g" \
            -e 's@ (.*)=(true)@\1 = \2@g' \
            -e 's@ (.*)=(false)@\1 = \2@g' \
            -e 's@ (.*)=(")@\1 = \2@g' \
            -e "s@ (.*)=(')@\1 = \2@g" \
            -i "${i}"
        cat "$i"
        sed -i "$ r${i}" i.toml
    fi

    i="/tmp/version/version.toml"
    if [ -r "$i" ]; then
        sed -i "$ r${i}" i.toml
    fi
}
write_to_toml_main "$@"
